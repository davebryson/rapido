// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `tx.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Tx {
    // message fields
    pub route: ::std::string::String,
    pub msgtype: u32,
    pub msg: ::std::vec::Vec<u8>,
    pub sender: ::std::vec::Vec<u8>,
    pub sig: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Tx {
    fn default() -> &'a Tx {
        <Tx as ::protobuf::Message>::default_instance()
    }
}

impl Tx {
    pub fn new() -> Tx {
        ::std::default::Default::default()
    }

    // string route = 1;


    pub fn get_route(&self) -> &str {
        &self.route
    }
    pub fn clear_route(&mut self) {
        self.route.clear();
    }

    // Param is passed by value, moved
    pub fn set_route(&mut self, v: ::std::string::String) {
        self.route = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route(&mut self) -> &mut ::std::string::String {
        &mut self.route
    }

    // Take field
    pub fn take_route(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.route, ::std::string::String::new())
    }

    // uint32 msgtype = 2;


    pub fn get_msgtype(&self) -> u32 {
        self.msgtype
    }
    pub fn clear_msgtype(&mut self) {
        self.msgtype = 0;
    }

    // Param is passed by value, moved
    pub fn set_msgtype(&mut self, v: u32) {
        self.msgtype = v;
    }

    // bytes msg = 3;


    pub fn get_msg(&self) -> &[u8] {
        &self.msg
    }
    pub fn clear_msg(&mut self) {
        self.msg.clear();
    }

    // Param is passed by value, moved
    pub fn set_msg(&mut self, v: ::std::vec::Vec<u8>) {
        self.msg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_msg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.msg
    }

    // Take field
    pub fn take_msg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.msg, ::std::vec::Vec::new())
    }

    // bytes sender = 4;


    pub fn get_sender(&self) -> &[u8] {
        &self.sender
    }
    pub fn clear_sender(&mut self) {
        self.sender.clear();
    }

    // Param is passed by value, moved
    pub fn set_sender(&mut self, v: ::std::vec::Vec<u8>) {
        self.sender = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sender(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sender
    }

    // Take field
    pub fn take_sender(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sender, ::std::vec::Vec::new())
    }

    // bytes sig = 5;


    pub fn get_sig(&self) -> &[u8] {
        &self.sig
    }
    pub fn clear_sig(&mut self) {
        self.sig.clear();
    }

    // Param is passed by value, moved
    pub fn set_sig(&mut self, v: ::std::vec::Vec<u8>) {
        self.sig = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sig(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.sig
    }

    // Take field
    pub fn take_sig(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.sig, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Tx {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.route)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.msgtype = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.msg)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sender)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.sig)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.route.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.route);
        }
        if self.msgtype != 0 {
            my_size += ::protobuf::rt::value_size(2, self.msgtype, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.msg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.msg);
        }
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.sender);
        }
        if !self.sig.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.sig);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.route.is_empty() {
            os.write_string(1, &self.route)?;
        }
        if self.msgtype != 0 {
            os.write_uint32(2, self.msgtype)?;
        }
        if !self.msg.is_empty() {
            os.write_bytes(3, &self.msg)?;
        }
        if !self.sender.is_empty() {
            os.write_bytes(4, &self.sender)?;
        }
        if !self.sig.is_empty() {
            os.write_bytes(5, &self.sig)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Tx {
        Tx::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "route",
                    |m: &Tx| { &m.route },
                    |m: &mut Tx| { &mut m.route },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "msgtype",
                    |m: &Tx| { &m.msgtype },
                    |m: &mut Tx| { &mut m.msgtype },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "msg",
                    |m: &Tx| { &m.msg },
                    |m: &mut Tx| { &mut m.msg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sender",
                    |m: &Tx| { &m.sender },
                    |m: &mut Tx| { &mut m.sender },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "sig",
                    |m: &Tx| { &m.sig },
                    |m: &mut Tx| { &mut m.sig },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Tx>(
                    "Tx",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Tx {
        static mut instance: ::protobuf::lazy::Lazy<Tx> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Tx,
        };
        unsafe {
            instance.get(Tx::new)
        }
    }
}

impl ::protobuf::Clear for Tx {
    fn clear(&mut self) {
        self.route.clear();
        self.msgtype = 0;
        self.msg.clear();
        self.sender.clear();
        self.sig.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Tx {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tx {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x08tx.proto\x12\x03app\"Z\n\x02Tx\x12\x0f\n\x05route\x18\x01\x20\x01(\
    \tB\0\x12\x11\n\x07msgtype\x18\x02\x20\x01(\rB\0\x12\r\n\x03msg\x18\x03\
    \x20\x01(\x0cB\0\x12\x10\n\x06sender\x18\x04\x20\x01(\x0cB\0\x12\r\n\x03\
    sig\x18\x05\x20\x01(\x0cB\0:\0B\0b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
